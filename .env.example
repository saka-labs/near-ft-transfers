# NEAR Protocol Configuration
# Required: NEAR RPC endpoint URL
NEAR_RPC_URL=https://rpc.testnet.near.org

# Required: Your NEAR account ID (sender account)
# Must be a valid NEAR account ID format (e.g., example.testnet or example.near)
NEAR_ACCOUNT_ID=jinakmerpati.testnet

# Required: Fungible token contract ID
# Must be a valid NEAR account ID format
NEAR_CONTRACT_ID=jinakmerpati.testnet

# Required: Private key for the sender account
# Must be in format: ed25519:base58_encoded_key
# Example: ed25519:5JueXZhEEVqGVT5powZ5twyPP8sbRRYQ5JuCpq6WGkpgPFfE4M8HxpZJ5trvhj8Y7qRvZYzMvNmF8B2bTTvVhqYL,ed25519:5JueXZhEEVqGVT5powZ5twyPP8sbRRYQ5JuCpq6WGkpgPFfE4M8HxpZJ5trvhj8Y7qRvZYzMvNmF8B2bTTvVhqYL,...
NEAR_PRIVATE_KEYS=ed25519:

# Optional: Maximum number of retries for failed transfers (default: 5)
# Must be a non-negative integer, max 100
MAX_RETRIES=5

# Optional: Database file path (default: :memory:)
# Use ':memory:' for in-memory database (data is lost on restart)
# Use a file path for persistent storage (e.g., './data/transfers.db')
# Note: In production, you should use a file path for persistence
DATABASE_PATH=/app/data/transfers.db

# Transfer Amount Configuration
# Optional: Minimum transfer amount in smallest token unit (default: 1)
# Must be a non-negative integer (string format to handle large numbers)
# Example: "1000000" for 1 token if token has 6 decimals
MIN_TRANSFER_AMOUNT=1

# Optional: Maximum transfer amount in smallest token unit (default: 1)
# Must be a non-negative integer (string format to handle large numbers)
# Example: "1000000000" for 1000 tokens if token has 6 decimals
MAX_TRANSFER_AMOUNT=1

# Validation Configuration
# Optional: Skip account existence validation (default: false)
# Set to 'true' to skip checking if recipient account exists on NEAR
# WARNING: Not recommended for production - transfers to non-existent accounts will fail
# Use this for performance optimization when you're sure accounts exist
SKIP_ACCOUNT_EXISTENCE=false

# Optional: Skip storage deposit validation (default: false)
# Set to 'true' to skip checking if recipient has storage deposit registered on FT contract
# WARNING: Not recommended for production - transfers to accounts without storage deposit will fail
# Use this for performance optimization when you're sure accounts have storage deposit
SKIP_STORAGE_CHECK=false

# Server Configuration
# Optional: Host for the HTTP server (default: 0.0.0.0)
# Use "0.0.0.0" to bind to all interfaces (default, recommended for Docker)
# Use "127.0.0.1" to bind to localhost only (recommended for development)
# Use specific IP to bind to specific interface
HOST=0.0.0.0

# Optional: Port for the HTTP server (default: 3000)
# Must be a valid port number between 1 and 65535
PORT=3000

# Optional: Node environment (development, production, test)
# Default: development
NODE_ENV=production

# Example Usage Scenarios:
#
# 1. Development (full validation, localhost):
#    HOST=127.0.0.1 SKIP_ACCOUNT_EXISTENCE=false SKIP_STORAGE_CHECK=false
#
# 2. Production Docker (full validation, all interfaces):
#    HOST=0.0.0.0 SKIP_ACCOUNT_EXISTENCE=false SKIP_STORAGE_CHECK=false
#
# 3. High Performance (skip account validation, assume accounts exist):
#    HOST=0.0.0.0 SKIP_ACCOUNT_EXISTENCE=true SKIP_STORAGE_CHECK=false
#
# 4. Maximum Performance (skip all validation):
#    HOST=0.0.0.0 SKIP_ACCOUNT_EXISTENCE=true SKIP_STORAGE_CHECK=true
#
# 5. Custom Amount Limits:
#    MIN_TRANSFER_AMOUNT=1000 MAX_TRANSFER_AMOUNT=1000000
